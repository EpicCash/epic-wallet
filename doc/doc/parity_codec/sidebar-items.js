initSidebarItems({"mod":[["alloc",""]],"struct":[["Compact","Compact-encoded variant of T. This is more space-efficient but less compute-efficient."]],"trait":[["Codec","Trait that allows zero-copy read/write of value-references to/from slices in LE format."],["CompactAs","Allow foreign structs to be wrap in Compact"],["Decode","Trait that allows zero-copy read of value-references from slices in LE format."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format. Implementations should override `using_encoded` for value types and `encode_to` for allocating types."],["EncodeAppend","Trait that allows to append items to an encoded representation without decoding all previous added items."],["EncodeAsRef","Something that can be encoded as a reference."],["HasCompact","Trait that tells you if a given type can be encoded/decoded in a compact way."],["Input","Trait that allows reading of data into a slice."],["Joiner","Trait to allow itself to be serialised into a value which can be extended by bytes."],["KeyedVec","Trait to allow itself to be serialised and prepended by a given slice."],["Output","Trait that allows writing of data."]]});