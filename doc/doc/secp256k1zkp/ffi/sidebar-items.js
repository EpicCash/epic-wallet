initSidebarItems({"constant":[["SECP256K1_SER_COMPRESSED","Flag for keys to indicate compressed serialization format"],["SECP256K1_SER_UNCOMPRESSED","Flag for keys to indicate uncompressed serialization format"],["SECP256K1_START_NONE","Flag for context to enable no precomputation"],["SECP256K1_START_SIGN","Flag for context to enable signing precomputation"],["SECP256K1_START_VERIFY","Flag for context to enable verification precomputation"]],"fn":[["ecdsa_signature_parse_der_lax",""],["secp256k1_aggsig_add_signatures_single",""],["secp256k1_aggsig_build_scratch_and_verify",""],["secp256k1_aggsig_combine_signatures",""],["secp256k1_aggsig_context_create",""],["secp256k1_aggsig_context_destroy",""],["secp256k1_aggsig_export_secnonce_single",""],["secp256k1_aggsig_generate_nonce",""],["secp256k1_aggsig_partial_sign",""],["secp256k1_aggsig_sign_single",""],["secp256k1_aggsig_verify_single",""],["secp256k1_blind_switch",""],["secp256k1_bulletproof_generators_create",""],["secp256k1_bulletproof_generators_destroy",""],["secp256k1_bulletproof_rangeproof_prove",""],["secp256k1_bulletproof_rangeproof_rewind",""],["secp256k1_bulletproof_rangeproof_verify",""],["secp256k1_bulletproof_rangeproof_verify_multi",""],["secp256k1_context_clone",""],["secp256k1_context_create",""],["secp256k1_context_destroy",""],["secp256k1_context_randomize",""],["secp256k1_ec_privkey_tweak_add",""],["secp256k1_ec_privkey_tweak_inv",""],["secp256k1_ec_privkey_tweak_mul",""],["secp256k1_ec_privkey_tweak_neg",""],["secp256k1_ec_pubkey_combine",""],["secp256k1_ec_pubkey_create",""],["secp256k1_ec_pubkey_parse",""],["secp256k1_ec_pubkey_serialize",""],["secp256k1_ec_pubkey_tweak_add",""],["secp256k1_ec_pubkey_tweak_mul",""],["secp256k1_ec_seckey_verify",""],["secp256k1_ecdh",""],["secp256k1_ecdsa_recover",""],["secp256k1_ecdsa_recoverable_signature_convert",""],["secp256k1_ecdsa_recoverable_signature_parse_compact",""],["secp256k1_ecdsa_recoverable_signature_serialize_compact",""],["secp256k1_ecdsa_sign",""],["secp256k1_ecdsa_sign_recoverable",""],["secp256k1_ecdsa_signature_normalize",""],["secp256k1_ecdsa_signature_parse_compact",""],["secp256k1_ecdsa_signature_parse_der",""],["secp256k1_ecdsa_signature_serialize_compact",""],["secp256k1_ecdsa_signature_serialize_der",""],["secp256k1_ecdsa_verify",""],["secp256k1_generator_generate",""],["secp256k1_pedersen_blind_commit",""],["secp256k1_pedersen_blind_sum",""],["secp256k1_pedersen_commit",""],["secp256k1_pedersen_commit_sum",""],["secp256k1_pedersen_commitment_parse",""],["secp256k1_pedersen_commitment_serialize",""],["secp256k1_pedersen_commitment_to_pubkey",""],["secp256k1_pedersen_verify_tally",""],["secp256k1_pubkey_to_pedersen_commitment",""],["secp256k1_rangeproof_info",""],["secp256k1_rangeproof_rewind",""],["secp256k1_rangeproof_sign",""],["secp256k1_rangeproof_verify",""],["secp256k1_schnorrsig_verify_batch",""],["secp256k1_scratch_space_create",""],["secp256k1_scratch_space_destroy",""]],"static":[["secp256k1_nonce_function_default",""],["secp256k1_nonce_function_rfc6979",""]],"struct":[["AggSigContext","Secp256k1 aggsig context. As above, needs to be destroyed with `secp256k1_aggsig_context_destroy`"],["AggSigPartialSignature","Library-internal representation of a Secp256k1 aggsig partial signature"],["BulletproofGenerators","Secp256k1 bulletproof generators"],["Context","A Secp256k1 context, containing various precomputed values and such needed to do elliptic curve computations. If you create one of these with `secp256k1_context_create` you MUST destroy it with `secp256k1_context_destroy`, or else you will have a memory leak."],["Generator","Generator"],["PublicKey","Library-internal representation of a Secp256k1 public key"],["RecoverableSignature","Library-internal representation of a Secp256k1 signature + recovery ID"],["ScratchSpace","Secp256k1 scratch space"],["SharedSecret","Library-internal representation of an ECDH shared secret"],["Signature","Library-internal representation of a Secp256k1 signature"]],"type":[["NonceFn","A nonce generation function. Ordinary users of the library never need to see this type; only if you need to control nonce generation do you need to use it. I have deliberately made this hard to do: you have to write your own wrapper around the FFI functions to use it. And itâ€™s an unsafe type. Nonces are generated deterministically by RFC6979 by default; there should be no need to ever change this."]]});