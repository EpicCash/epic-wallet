initSidebarItems({"constant":[["ARRAY_CONTAINER_TYPE_CODE",""],["ARRAY_DEFAULT_INIT_SIZE",""],["ARRAY_LAZY_LOWERBOUND",""],["BITSET_CONTAINER_SIZE_IN_WORDS",""],["BITSET_CONTAINER_TYPE_CODE",""],["BITSET_UNKNOWN_CARDINALITY",""],["BUFSIZ",""],["BUS_ADRALN",""],["BUS_ADRERR",""],["BUS_OBJERR",""],["CLD_CONTINUED",""],["CLD_DUMPED",""],["CLD_EXITED",""],["CLD_KILLED",""],["CLD_STOPPED",""],["CLD_TRAPPED",""],["DEFAULT_MAX_SIZE",""],["EOF",""],["EXIT_FAILURE",""],["EXIT_SUCCESS",""],["FILENAME_MAX",""],["FOPEN_MAX",""],["FPE_FLTDIV",""],["FPE_FLTINV",""],["FPE_FLTOVF",""],["FPE_FLTRES",""],["FPE_FLTSUB",""],["FPE_FLTUND",""],["FPE_INTDIV",""],["FPE_INTOVF",""],["FROZEN_COOKIE",""],["ILL_BADSTK",""],["ILL_COPROC",""],["ILL_ILLADR",""],["ILL_ILLOPC",""],["ILL_ILLOPN",""],["ILL_ILLTRP",""],["ILL_PRVOPC",""],["ILL_PRVREG",""],["INT16_MAX",""],["INT16_MIN",""],["INT32_MAX",""],["INT32_MIN",""],["INT64_MAX",""],["INT64_MIN",""],["INT8_MAX",""],["INT8_MIN",""],["INTPTR_MAX",""],["INTPTR_MIN",""],["INT_FAST16_MAX",""],["INT_FAST16_MIN",""],["INT_FAST32_MAX",""],["INT_FAST32_MIN",""],["INT_FAST64_MAX",""],["INT_FAST64_MIN",""],["INT_FAST8_MAX",""],["INT_FAST8_MIN",""],["INT_LEAST16_MAX",""],["INT_LEAST16_MIN",""],["INT_LEAST32_MAX",""],["INT_LEAST32_MIN",""],["INT_LEAST64_MAX",""],["INT_LEAST64_MIN",""],["INT_LEAST8_MAX",""],["INT_LEAST8_MIN",""],["LAZY_OR_BITSET_CONVERSION",""],["LAZY_OR_BITSET_CONVERSION_TO_FULL",""],["L_ctermid",""],["L_tmpnam",""],["MAX_CONTAINERS",""],["MINSIGSTKSZ",""],["NO_OFFSET_THRESHOLD",""],["OR_BITSET_CONVERSION_TO_FULL",""],["POLL_ERR",""],["POLL_HUP",""],["POLL_IN",""],["POLL_MSG",""],["POLL_OUT",""],["POLL_PRI",""],["PRIO_PGRP",""],["PRIO_PROCESS",""],["PRIO_USER",""],["P_tmpdir",""],["RAND_MAX",""],["RLIMIT_AS",""],["RLIMIT_CORE",""],["RLIMIT_CPU",""],["RLIMIT_DATA",""],["RLIMIT_FSIZE",""],["RLIMIT_NOFILE",""],["RLIMIT_STACK",""],["ROARING_VERSION_MAJOR",""],["ROARING_VERSION_MINOR",""],["ROARING_VERSION_REVISION",""],["RUN_CONTAINER_TYPE_CODE",""],["RUN_DEFAULT_INIT_SIZE",""],["RUSAGE_CHILDREN",""],["RUSAGE_SELF",""],["SA_NOCLDSTOP",""],["SA_NOCLDWAIT",""],["SA_NODEFER",""],["SA_ONSTACK",""],["SA_RESETHAND",""],["SA_RESTART",""],["SA_SIGINFO",""],["SA_USERSPACE_MASK",""],["SEEK_CUR",""],["SEEK_END",""],["SEEK_SET",""],["SEGV_ACCERR",""],["SEGV_MAPERR",""],["SERIALIZATION_ARRAY_UINT32",""],["SERIALIZATION_CONTAINER",""],["SERIAL_COOKIE",""],["SERIAL_COOKIE_NO_RUNCONTAINER",""],["SHARED_CONTAINER_TYPE_CODE",""],["SIGABRT",""],["SIGALRM",""],["SIGBUS",""],["SIGCHLD",""],["SIGCONT",""],["SIGEV_NONE",""],["SIGEV_SIGNAL",""],["SIGEV_THREAD",""],["SIGFPE",""],["SIGHUP",""],["SIGILL",""],["SIGINT",""],["SIGKILL",""],["SIGPIPE",""],["SIGPOLL",""],["SIGPROF",""],["SIGQUIT",""],["SIGSEGV",""],["SIGSTKSZ",""],["SIGSTOP",""],["SIGSYS",""],["SIGTERM",""],["SIGTRAP",""],["SIGTSTP",""],["SIGTTIN",""],["SIGTTOU",""],["SIGURG",""],["SIGUSR1",""],["SIGUSR2",""],["SIGVTALRM",""],["SIGXCPU",""],["SIGXFSZ",""],["SIG_ATOMIC_MAX",""],["SIG_ATOMIC_MIN",""],["SIG_BLOCK",""],["SIG_SETMASK",""],["SIG_UNBLOCK",""],["SIZE_MAX",""],["SI_ASYNCIO",""],["SI_MESGQ",""],["SI_QUEUE",""],["SI_TIMER",""],["SI_USER",""],["SS_DISABLE",""],["SS_ONSTACK",""],["TMP_MAX",""],["TRAP_BRKPT",""],["TRAP_TRACE",""],["UINT16_MAX",""],["UINT32_MAX",""],["UINT64_MAX",""],["UINT8_MAX",""],["UINTPTR_MAX",""],["UINT_FAST16_MAX",""],["UINT_FAST32_MAX",""],["UINT_FAST64_MAX",""],["UINT_FAST8_MAX",""],["UINT_LEAST16_MAX",""],["UINT_LEAST32_MAX",""],["UINT_LEAST64_MAX",""],["UINT_LEAST8_MAX",""],["WCONTINUED",""],["WEXITED",""],["WINT_MAX",""],["WINT_MIN",""],["WNOHANG",""],["WNOWAIT",""],["WSTOPPED",""],["WUNTRACED",""],["_CMP_EQ_OQ",""],["_CMP_EQ_OS",""],["_CMP_EQ_UQ",""],["_CMP_EQ_US",""],["_CMP_FALSE_OQ",""],["_CMP_FALSE_OS",""],["_CMP_GE_OQ",""],["_CMP_GE_OS",""],["_CMP_GT_OQ",""],["_CMP_GT_OS",""],["_CMP_LE_OQ",""],["_CMP_LE_OS",""],["_CMP_LT_OQ",""],["_CMP_LT_OS",""],["_CMP_NEQ_OQ",""],["_CMP_NEQ_OS",""],["_CMP_NEQ_UQ",""],["_CMP_NEQ_US",""],["_CMP_NGE_UQ",""],["_CMP_NGE_US",""],["_CMP_NGT_UQ",""],["_CMP_NGT_US",""],["_CMP_NLE_UQ",""],["_CMP_NLE_US",""],["_CMP_NLT_UQ",""],["_CMP_NLT_US",""],["_CMP_ORD_Q",""],["_CMP_ORD_S",""],["_CMP_TRUE_UQ",""],["_CMP_TRUE_US",""],["_CMP_UNORD_Q",""],["_CMP_UNORD_S",""],["_DARWIN_FEATURE_64_BIT_INODE",""],["_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE",""],["_DARWIN_FEATURE_UNIX_CONFORMANCE",""],["_FORTIFY_SOURCE",""],["_I386_SIGNAL_H_",""],["_IOFBF",""],["_IOLBF",""],["_IONBF",""],["_LIBCPP_HAS_MERGED_TYPEINFO_NAMES_DEFAULT",""],["_MM_CMPINT_ENUM__MM_CMPINT_EQ",""],["_MM_CMPINT_ENUM__MM_CMPINT_LE",""],["_MM_CMPINT_ENUM__MM_CMPINT_LT",""],["_MM_CMPINT_ENUM__MM_CMPINT_NE",""],["_MM_CMPINT_ENUM__MM_CMPINT_NLE",""],["_MM_CMPINT_ENUM__MM_CMPINT_NLT",""],["_MM_CMPINT_ENUM__MM_CMPINT_UNUSED",""],["_MM_DENORMALS_ZERO_MASK",""],["_MM_DENORMALS_ZERO_OFF",""],["_MM_DENORMALS_ZERO_ON",""],["_MM_EXCEPT_DENORM",""],["_MM_EXCEPT_DIV_ZERO",""],["_MM_EXCEPT_INEXACT",""],["_MM_EXCEPT_INVALID",""],["_MM_EXCEPT_MASK",""],["_MM_EXCEPT_OVERFLOW",""],["_MM_EXCEPT_UNDERFLOW",""],["_MM_FLUSH_ZERO_MASK",""],["_MM_FLUSH_ZERO_OFF",""],["_MM_FLUSH_ZERO_ON",""],["_MM_FROUND_CEIL",""],["_MM_FROUND_CUR_DIRECTION",""],["_MM_FROUND_FLOOR",""],["_MM_FROUND_NEARBYINT",""],["_MM_FROUND_NINT",""],["_MM_FROUND_NO_EXC",""],["_MM_FROUND_RAISE_EXC",""],["_MM_FROUND_RINT",""],["_MM_FROUND_TO_NEAREST_INT",""],["_MM_FROUND_TO_NEG_INF",""],["_MM_FROUND_TO_POS_INF",""],["_MM_FROUND_TO_ZERO",""],["_MM_FROUND_TRUNC",""],["_MM_HINT_ET0",""],["_MM_HINT_ET1",""],["_MM_HINT_NTA",""],["_MM_HINT_T0",""],["_MM_HINT_T1",""],["_MM_HINT_T2",""],["_MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_1_2",""],["_MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_1",""],["_MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_2",""],["_MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p75_1p5",""],["_MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_nan",""],["_MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_src",""],["_MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_zero",""],["_MM_MASK_DENORM",""],["_MM_MASK_DIV_ZERO",""],["_MM_MASK_INEXACT",""],["_MM_MASK_INVALID",""],["_MM_MASK_MASK",""],["_MM_MASK_OVERFLOW",""],["_MM_MASK_UNDERFLOW",""],["_MM_PCOMCTRL_EQ",""],["_MM_PCOMCTRL_FALSE",""],["_MM_PCOMCTRL_GE",""],["_MM_PCOMCTRL_GT",""],["_MM_PCOMCTRL_LE",""],["_MM_PCOMCTRL_LT",""],["_MM_PCOMCTRL_NEQ",""],["_MM_PCOMCTRL_TRUE",""],["_MM_PERM_ENUM__MM_PERM_AAAA",""],["_MM_PERM_ENUM__MM_PERM_AAAB",""],["_MM_PERM_ENUM__MM_PERM_AAAC",""],["_MM_PERM_ENUM__MM_PERM_AAAD",""],["_MM_PERM_ENUM__MM_PERM_AABA",""],["_MM_PERM_ENUM__MM_PERM_AABB",""],["_MM_PERM_ENUM__MM_PERM_AABC",""],["_MM_PERM_ENUM__MM_PERM_AABD",""],["_MM_PERM_ENUM__MM_PERM_AACA",""],["_MM_PERM_ENUM__MM_PERM_AACB",""],["_MM_PERM_ENUM__MM_PERM_AACC",""],["_MM_PERM_ENUM__MM_PERM_AACD",""],["_MM_PERM_ENUM__MM_PERM_AADA",""],["_MM_PERM_ENUM__MM_PERM_AADB",""],["_MM_PERM_ENUM__MM_PERM_AADC",""],["_MM_PERM_ENUM__MM_PERM_AADD",""],["_MM_PERM_ENUM__MM_PERM_ABAA",""],["_MM_PERM_ENUM__MM_PERM_ABAB",""],["_MM_PERM_ENUM__MM_PERM_ABAC",""],["_MM_PERM_ENUM__MM_PERM_ABAD",""],["_MM_PERM_ENUM__MM_PERM_ABBA",""],["_MM_PERM_ENUM__MM_PERM_ABBB",""],["_MM_PERM_ENUM__MM_PERM_ABBC",""],["_MM_PERM_ENUM__MM_PERM_ABBD",""],["_MM_PERM_ENUM__MM_PERM_ABCA",""],["_MM_PERM_ENUM__MM_PERM_ABCB",""],["_MM_PERM_ENUM__MM_PERM_ABCC",""],["_MM_PERM_ENUM__MM_PERM_ABCD",""],["_MM_PERM_ENUM__MM_PERM_ABDA",""],["_MM_PERM_ENUM__MM_PERM_ABDB",""],["_MM_PERM_ENUM__MM_PERM_ABDC",""],["_MM_PERM_ENUM__MM_PERM_ABDD",""],["_MM_PERM_ENUM__MM_PERM_ACAA",""],["_MM_PERM_ENUM__MM_PERM_ACAB",""],["_MM_PERM_ENUM__MM_PERM_ACAC",""],["_MM_PERM_ENUM__MM_PERM_ACAD",""],["_MM_PERM_ENUM__MM_PERM_ACBA",""],["_MM_PERM_ENUM__MM_PERM_ACBB",""],["_MM_PERM_ENUM__MM_PERM_ACBC",""],["_MM_PERM_ENUM__MM_PERM_ACBD",""],["_MM_PERM_ENUM__MM_PERM_ACCA",""],["_MM_PERM_ENUM__MM_PERM_ACCB",""],["_MM_PERM_ENUM__MM_PERM_ACCC",""],["_MM_PERM_ENUM__MM_PERM_ACCD",""],["_MM_PERM_ENUM__MM_PERM_ACDA",""],["_MM_PERM_ENUM__MM_PERM_ACDB",""],["_MM_PERM_ENUM__MM_PERM_ACDC",""],["_MM_PERM_ENUM__MM_PERM_ACDD",""],["_MM_PERM_ENUM__MM_PERM_ADAA",""],["_MM_PERM_ENUM__MM_PERM_ADAB",""],["_MM_PERM_ENUM__MM_PERM_ADAC",""],["_MM_PERM_ENUM__MM_PERM_ADAD",""],["_MM_PERM_ENUM__MM_PERM_ADBA",""],["_MM_PERM_ENUM__MM_PERM_ADBB",""],["_MM_PERM_ENUM__MM_PERM_ADBC",""],["_MM_PERM_ENUM__MM_PERM_ADBD",""],["_MM_PERM_ENUM__MM_PERM_ADCA",""],["_MM_PERM_ENUM__MM_PERM_ADCB",""],["_MM_PERM_ENUM__MM_PERM_ADCC",""],["_MM_PERM_ENUM__MM_PERM_ADCD",""],["_MM_PERM_ENUM__MM_PERM_ADDA",""],["_MM_PERM_ENUM__MM_PERM_ADDB",""],["_MM_PERM_ENUM__MM_PERM_ADDC",""],["_MM_PERM_ENUM__MM_PERM_ADDD",""],["_MM_PERM_ENUM__MM_PERM_BAAA",""],["_MM_PERM_ENUM__MM_PERM_BAAB",""],["_MM_PERM_ENUM__MM_PERM_BAAC",""],["_MM_PERM_ENUM__MM_PERM_BAAD",""],["_MM_PERM_ENUM__MM_PERM_BABA",""],["_MM_PERM_ENUM__MM_PERM_BABB",""],["_MM_PERM_ENUM__MM_PERM_BABC",""],["_MM_PERM_ENUM__MM_PERM_BABD",""],["_MM_PERM_ENUM__MM_PERM_BACA",""],["_MM_PERM_ENUM__MM_PERM_BACB",""],["_MM_PERM_ENUM__MM_PERM_BACC",""],["_MM_PERM_ENUM__MM_PERM_BACD",""],["_MM_PERM_ENUM__MM_PERM_BADA",""],["_MM_PERM_ENUM__MM_PERM_BADB",""],["_MM_PERM_ENUM__MM_PERM_BADC",""],["_MM_PERM_ENUM__MM_PERM_BADD",""],["_MM_PERM_ENUM__MM_PERM_BBAA",""],["_MM_PERM_ENUM__MM_PERM_BBAB",""],["_MM_PERM_ENUM__MM_PERM_BBAC",""],["_MM_PERM_ENUM__MM_PERM_BBAD",""],["_MM_PERM_ENUM__MM_PERM_BBBA",""],["_MM_PERM_ENUM__MM_PERM_BBBB",""],["_MM_PERM_ENUM__MM_PERM_BBBC",""],["_MM_PERM_ENUM__MM_PERM_BBBD",""],["_MM_PERM_ENUM__MM_PERM_BBCA",""],["_MM_PERM_ENUM__MM_PERM_BBCB",""],["_MM_PERM_ENUM__MM_PERM_BBCC",""],["_MM_PERM_ENUM__MM_PERM_BBCD",""],["_MM_PERM_ENUM__MM_PERM_BBDA",""],["_MM_PERM_ENUM__MM_PERM_BBDB",""],["_MM_PERM_ENUM__MM_PERM_BBDC",""],["_MM_PERM_ENUM__MM_PERM_BBDD",""],["_MM_PERM_ENUM__MM_PERM_BCAA",""],["_MM_PERM_ENUM__MM_PERM_BCAB",""],["_MM_PERM_ENUM__MM_PERM_BCAC",""],["_MM_PERM_ENUM__MM_PERM_BCAD",""],["_MM_PERM_ENUM__MM_PERM_BCBA",""],["_MM_PERM_ENUM__MM_PERM_BCBB",""],["_MM_PERM_ENUM__MM_PERM_BCBC",""],["_MM_PERM_ENUM__MM_PERM_BCBD",""],["_MM_PERM_ENUM__MM_PERM_BCCA",""],["_MM_PERM_ENUM__MM_PERM_BCCB",""],["_MM_PERM_ENUM__MM_PERM_BCCC",""],["_MM_PERM_ENUM__MM_PERM_BCCD",""],["_MM_PERM_ENUM__MM_PERM_BCDA",""],["_MM_PERM_ENUM__MM_PERM_BCDB",""],["_MM_PERM_ENUM__MM_PERM_BCDC",""],["_MM_PERM_ENUM__MM_PERM_BCDD",""],["_MM_PERM_ENUM__MM_PERM_BDAA",""],["_MM_PERM_ENUM__MM_PERM_BDAB",""],["_MM_PERM_ENUM__MM_PERM_BDAC",""],["_MM_PERM_ENUM__MM_PERM_BDAD",""],["_MM_PERM_ENUM__MM_PERM_BDBA",""],["_MM_PERM_ENUM__MM_PERM_BDBB",""],["_MM_PERM_ENUM__MM_PERM_BDBC",""],["_MM_PERM_ENUM__MM_PERM_BDBD",""],["_MM_PERM_ENUM__MM_PERM_BDCA",""],["_MM_PERM_ENUM__MM_PERM_BDCB",""],["_MM_PERM_ENUM__MM_PERM_BDCC",""],["_MM_PERM_ENUM__MM_PERM_BDCD",""],["_MM_PERM_ENUM__MM_PERM_BDDA",""],["_MM_PERM_ENUM__MM_PERM_BDDB",""],["_MM_PERM_ENUM__MM_PERM_BDDC",""],["_MM_PERM_ENUM__MM_PERM_BDDD",""],["_MM_PERM_ENUM__MM_PERM_CAAA",""],["_MM_PERM_ENUM__MM_PERM_CAAB",""],["_MM_PERM_ENUM__MM_PERM_CAAC",""],["_MM_PERM_ENUM__MM_PERM_CAAD",""],["_MM_PERM_ENUM__MM_PERM_CABA",""],["_MM_PERM_ENUM__MM_PERM_CABB",""],["_MM_PERM_ENUM__MM_PERM_CABC",""],["_MM_PERM_ENUM__MM_PERM_CABD",""],["_MM_PERM_ENUM__MM_PERM_CACA",""],["_MM_PERM_ENUM__MM_PERM_CACB",""],["_MM_PERM_ENUM__MM_PERM_CACC",""],["_MM_PERM_ENUM__MM_PERM_CACD",""],["_MM_PERM_ENUM__MM_PERM_CADA",""],["_MM_PERM_ENUM__MM_PERM_CADB",""],["_MM_PERM_ENUM__MM_PERM_CADC",""],["_MM_PERM_ENUM__MM_PERM_CADD",""],["_MM_PERM_ENUM__MM_PERM_CBAA",""],["_MM_PERM_ENUM__MM_PERM_CBAB",""],["_MM_PERM_ENUM__MM_PERM_CBAC",""],["_MM_PERM_ENUM__MM_PERM_CBAD",""],["_MM_PERM_ENUM__MM_PERM_CBBA",""],["_MM_PERM_ENUM__MM_PERM_CBBB",""],["_MM_PERM_ENUM__MM_PERM_CBBC",""],["_MM_PERM_ENUM__MM_PERM_CBBD",""],["_MM_PERM_ENUM__MM_PERM_CBCA",""],["_MM_PERM_ENUM__MM_PERM_CBCB",""],["_MM_PERM_ENUM__MM_PERM_CBCC",""],["_MM_PERM_ENUM__MM_PERM_CBCD",""],["_MM_PERM_ENUM__MM_PERM_CBDA",""],["_MM_PERM_ENUM__MM_PERM_CBDB",""],["_MM_PERM_ENUM__MM_PERM_CBDC",""],["_MM_PERM_ENUM__MM_PERM_CBDD",""],["_MM_PERM_ENUM__MM_PERM_CCAA",""],["_MM_PERM_ENUM__MM_PERM_CCAB",""],["_MM_PERM_ENUM__MM_PERM_CCAC",""],["_MM_PERM_ENUM__MM_PERM_CCAD",""],["_MM_PERM_ENUM__MM_PERM_CCBA",""],["_MM_PERM_ENUM__MM_PERM_CCBB",""],["_MM_PERM_ENUM__MM_PERM_CCBC",""],["_MM_PERM_ENUM__MM_PERM_CCBD",""],["_MM_PERM_ENUM__MM_PERM_CCCA",""],["_MM_PERM_ENUM__MM_PERM_CCCB",""],["_MM_PERM_ENUM__MM_PERM_CCCC",""],["_MM_PERM_ENUM__MM_PERM_CCCD",""],["_MM_PERM_ENUM__MM_PERM_CCDA",""],["_MM_PERM_ENUM__MM_PERM_CCDB",""],["_MM_PERM_ENUM__MM_PERM_CCDC",""],["_MM_PERM_ENUM__MM_PERM_CCDD",""],["_MM_PERM_ENUM__MM_PERM_CDAA",""],["_MM_PERM_ENUM__MM_PERM_CDAB",""],["_MM_PERM_ENUM__MM_PERM_CDAC",""],["_MM_PERM_ENUM__MM_PERM_CDAD",""],["_MM_PERM_ENUM__MM_PERM_CDBA",""],["_MM_PERM_ENUM__MM_PERM_CDBB",""],["_MM_PERM_ENUM__MM_PERM_CDBC",""],["_MM_PERM_ENUM__MM_PERM_CDBD",""],["_MM_PERM_ENUM__MM_PERM_CDCA",""],["_MM_PERM_ENUM__MM_PERM_CDCB",""],["_MM_PERM_ENUM__MM_PERM_CDCC",""],["_MM_PERM_ENUM__MM_PERM_CDCD",""],["_MM_PERM_ENUM__MM_PERM_CDDA",""],["_MM_PERM_ENUM__MM_PERM_CDDB",""],["_MM_PERM_ENUM__MM_PERM_CDDC",""],["_MM_PERM_ENUM__MM_PERM_CDDD",""],["_MM_PERM_ENUM__MM_PERM_DAAA",""],["_MM_PERM_ENUM__MM_PERM_DAAB",""],["_MM_PERM_ENUM__MM_PERM_DAAC",""],["_MM_PERM_ENUM__MM_PERM_DAAD",""],["_MM_PERM_ENUM__MM_PERM_DABA",""],["_MM_PERM_ENUM__MM_PERM_DABB",""],["_MM_PERM_ENUM__MM_PERM_DABC",""],["_MM_PERM_ENUM__MM_PERM_DABD",""],["_MM_PERM_ENUM__MM_PERM_DACA",""],["_MM_PERM_ENUM__MM_PERM_DACB",""],["_MM_PERM_ENUM__MM_PERM_DACC",""],["_MM_PERM_ENUM__MM_PERM_DACD",""],["_MM_PERM_ENUM__MM_PERM_DADA",""],["_MM_PERM_ENUM__MM_PERM_DADB",""],["_MM_PERM_ENUM__MM_PERM_DADC",""],["_MM_PERM_ENUM__MM_PERM_DADD",""],["_MM_PERM_ENUM__MM_PERM_DBAA",""],["_MM_PERM_ENUM__MM_PERM_DBAB",""],["_MM_PERM_ENUM__MM_PERM_DBAC",""],["_MM_PERM_ENUM__MM_PERM_DBAD",""],["_MM_PERM_ENUM__MM_PERM_DBBA",""],["_MM_PERM_ENUM__MM_PERM_DBBB",""],["_MM_PERM_ENUM__MM_PERM_DBBC",""],["_MM_PERM_ENUM__MM_PERM_DBBD",""],["_MM_PERM_ENUM__MM_PERM_DBCA",""],["_MM_PERM_ENUM__MM_PERM_DBCB",""],["_MM_PERM_ENUM__MM_PERM_DBCC",""],["_MM_PERM_ENUM__MM_PERM_DBCD",""],["_MM_PERM_ENUM__MM_PERM_DBDA",""],["_MM_PERM_ENUM__MM_PERM_DBDB",""],["_MM_PERM_ENUM__MM_PERM_DBDC",""],["_MM_PERM_ENUM__MM_PERM_DBDD",""],["_MM_PERM_ENUM__MM_PERM_DCAA",""],["_MM_PERM_ENUM__MM_PERM_DCAB",""],["_MM_PERM_ENUM__MM_PERM_DCAC",""],["_MM_PERM_ENUM__MM_PERM_DCAD",""],["_MM_PERM_ENUM__MM_PERM_DCBA",""],["_MM_PERM_ENUM__MM_PERM_DCBB",""],["_MM_PERM_ENUM__MM_PERM_DCBC",""],["_MM_PERM_ENUM__MM_PERM_DCBD",""],["_MM_PERM_ENUM__MM_PERM_DCCA",""],["_MM_PERM_ENUM__MM_PERM_DCCB",""],["_MM_PERM_ENUM__MM_PERM_DCCC",""],["_MM_PERM_ENUM__MM_PERM_DCCD",""],["_MM_PERM_ENUM__MM_PERM_DCDA",""],["_MM_PERM_ENUM__MM_PERM_DCDB",""],["_MM_PERM_ENUM__MM_PERM_DCDC",""],["_MM_PERM_ENUM__MM_PERM_DCDD",""],["_MM_PERM_ENUM__MM_PERM_DDAA",""],["_MM_PERM_ENUM__MM_PERM_DDAB",""],["_MM_PERM_ENUM__MM_PERM_DDAC",""],["_MM_PERM_ENUM__MM_PERM_DDAD",""],["_MM_PERM_ENUM__MM_PERM_DDBA",""],["_MM_PERM_ENUM__MM_PERM_DDBB",""],["_MM_PERM_ENUM__MM_PERM_DDBC",""],["_MM_PERM_ENUM__MM_PERM_DDBD",""],["_MM_PERM_ENUM__MM_PERM_DDCA",""],["_MM_PERM_ENUM__MM_PERM_DDCB",""],["_MM_PERM_ENUM__MM_PERM_DDCC",""],["_MM_PERM_ENUM__MM_PERM_DDCD",""],["_MM_PERM_ENUM__MM_PERM_DDDA",""],["_MM_PERM_ENUM__MM_PERM_DDDB",""],["_MM_PERM_ENUM__MM_PERM_DDDC",""],["_MM_PERM_ENUM__MM_PERM_DDDD",""],["_MM_ROUND_DOWN",""],["_MM_ROUND_MASK",""],["_MM_ROUND_NEAREST",""],["_MM_ROUND_TOWARD_ZERO",""],["_MM_ROUND_UP",""],["_POSIX_C_SOURCE",""],["_RLIMIT_POSIX_FLAG",""],["_SIDD_BIT_MASK",""],["_SIDD_CMP_EQUAL_ANY",""],["_SIDD_CMP_EQUAL_EACH",""],["_SIDD_CMP_EQUAL_ORDERED",""],["_SIDD_CMP_RANGES",""],["_SIDD_LEAST_SIGNIFICANT",""],["_SIDD_MASKED_NEGATIVE_POLARITY",""],["_SIDD_MASKED_POSITIVE_POLARITY",""],["_SIDD_MOST_SIGNIFICANT",""],["_SIDD_NEGATIVE_POLARITY",""],["_SIDD_POSITIVE_POLARITY",""],["_SIDD_SBYTE_OPS",""],["_SIDD_SWORD_OPS",""],["_SIDD_UBYTE_OPS",""],["_SIDD_UNIT_MASK",""],["_SIDD_UWORD_OPS",""],["_USE_FORTIFY_LEVEL",""],["_WSTOPPED",""],["_X86_INSTRUCTION_STATE_CACHELINE_SIZE",""],["_X86_INSTRUCTION_STATE_MAX_INSN_BYTES",""],["_XABORT_CAPACITY",""],["_XABORT_CONFLICT",""],["_XABORT_DEBUG",""],["_XABORT_EXPLICIT",""],["_XABORT_NESTED",""],["_XABORT_RETRY",""],["_XBEGIN_STARTED",""],["_XOPEN_SOURCE",""],["__API_TO_BE_DEPRECATED",""],["__DARWIN_64_BIT_INO_T",""],["__DARWIN_C_ANSI",""],["__DARWIN_C_FULL",""],["__DARWIN_C_LEVEL",""],["__DARWIN_NON_CANCELABLE",""],["__DARWIN_NO_LONG_LONG",""],["__DARWIN_NSIG",""],["__DARWIN_ONLY_64_BIT_INO_T",""],["__DARWIN_ONLY_UNIX_CONFORMANCE",""],["__DARWIN_ONLY_VERS_1050",""],["__DARWIN_SUF_1050",""],["__DARWIN_SUF_64_BIT_INO_T",""],["__DARWIN_SUF_EXTSN",""],["__DARWIN_UNIX03",""],["__DARWIN_VERS_1050",""],["__DARWIN_WCHAR_MIN",""],["__DRIVERKIT_19_0",""],["__DRIVERKIT_20_0",""],["__ENABLE_LEGACY_MAC_AVAILABILITY",""],["__HAS_FIXED_CHK_PROTOTYPES",""],["__IPHONE_10_0",""],["__IPHONE_10_1",""],["__IPHONE_10_2",""],["__IPHONE_10_3",""],["__IPHONE_11_0",""],["__IPHONE_11_1",""],["__IPHONE_11_2",""],["__IPHONE_11_3",""],["__IPHONE_11_4",""],["__IPHONE_12_0",""],["__IPHONE_12_1",""],["__IPHONE_12_2",""],["__IPHONE_12_3",""],["__IPHONE_12_4",""],["__IPHONE_13_0",""],["__IPHONE_13_1",""],["__IPHONE_13_2",""],["__IPHONE_13_3",""],["__IPHONE_13_4",""],["__IPHONE_13_5",""],["__IPHONE_13_6",""],["__IPHONE_13_7",""],["__IPHONE_14_0",""],["__IPHONE_14_1",""],["__IPHONE_14_2",""],["__IPHONE_14_3",""],["__IPHONE_2_0",""],["__IPHONE_2_1",""],["__IPHONE_2_2",""],["__IPHONE_3_0",""],["__IPHONE_3_1",""],["__IPHONE_3_2",""],["__IPHONE_4_0",""],["__IPHONE_4_1",""],["__IPHONE_4_2",""],["__IPHONE_4_3",""],["__IPHONE_5_0",""],["__IPHONE_5_1",""],["__IPHONE_6_0",""],["__IPHONE_6_1",""],["__IPHONE_7_0",""],["__IPHONE_7_1",""],["__IPHONE_8_0",""],["__IPHONE_8_1",""],["__IPHONE_8_2",""],["__IPHONE_8_3",""],["__IPHONE_8_4",""],["__IPHONE_9_0",""],["__IPHONE_9_1",""],["__IPHONE_9_2",""],["__IPHONE_9_3",""],["__LASTBRANCH_MAX",""],["__MAC_10_0",""],["__MAC_10_1",""],["__MAC_10_10",""],["__MAC_10_10_2",""],["__MAC_10_10_3",""],["__MAC_10_11",""],["__MAC_10_11_2",""],["__MAC_10_11_3",""],["__MAC_10_11_4",""],["__MAC_10_12",""],["__MAC_10_12_1",""],["__MAC_10_12_2",""],["__MAC_10_12_4",""],["__MAC_10_13",""],["__MAC_10_13_1",""],["__MAC_10_13_2",""],["__MAC_10_13_4",""],["__MAC_10_14",""],["__MAC_10_14_1",""],["__MAC_10_14_4",""],["__MAC_10_14_6",""],["__MAC_10_15",""],["__MAC_10_15_1",""],["__MAC_10_15_4",""],["__MAC_10_16",""],["__MAC_10_2",""],["__MAC_10_3",""],["__MAC_10_4",""],["__MAC_10_5",""],["__MAC_10_6",""],["__MAC_10_7",""],["__MAC_10_8",""],["__MAC_10_9",""],["__MAC_11_0",""],["__MAC_11_1",""],["__MAC_OS_X_VERSION_MAX_ALLOWED",""],["__PCONFIG_KEY_PROGRAM",""],["__PTHREAD_ATTR_SIZE__",""],["__PTHREAD_CONDATTR_SIZE__",""],["__PTHREAD_COND_SIZE__",""],["__PTHREAD_MUTEXATTR_SIZE__",""],["__PTHREAD_MUTEX_SIZE__",""],["__PTHREAD_ONCE_SIZE__",""],["__PTHREAD_RWLOCKATTR_SIZE__",""],["__PTHREAD_RWLOCK_SIZE__",""],["__PTHREAD_SIZE__",""],["__SALC",""],["__SAPP",""],["__SEOF",""],["__SERR",""],["__SIGN",""],["__SLBF",""],["__SMBF",""],["__SMOD",""],["__SNBF",""],["__SNPT",""],["__SOFF",""],["__SOPT",""],["__SRD",""],["__SRW",""],["__SSTR",""],["__STDC_FORMAT_MACROS",""],["__SWR",""],["__TVOS_10_0",""],["__TVOS_10_0_1",""],["__TVOS_10_1",""],["__TVOS_10_2",""],["__TVOS_11_0",""],["__TVOS_11_1",""],["__TVOS_11_2",""],["__TVOS_11_3",""],["__TVOS_11_4",""],["__TVOS_12_0",""],["__TVOS_12_1",""],["__TVOS_12_2",""],["__TVOS_12_3",""],["__TVOS_12_4",""],["__TVOS_13_0",""],["__TVOS_13_2",""],["__TVOS_13_3",""],["__TVOS_13_4",""],["__TVOS_14_0",""],["__TVOS_14_1",""],["__TVOS_14_2",""],["__TVOS_14_3",""],["__TVOS_9_0",""],["__TVOS_9_1",""],["__TVOS_9_2",""],["__WATCHOS_1_0",""],["__WATCHOS_2_0",""],["__WATCHOS_2_1",""],["__WATCHOS_2_2",""],["__WATCHOS_3_0",""],["__WATCHOS_3_1",""],["__WATCHOS_3_1_1",""],["__WATCHOS_3_2",""],["__WATCHOS_4_0",""],["__WATCHOS_4_1",""],["__WATCHOS_4_2",""],["__WATCHOS_4_3",""],["__WATCHOS_5_0",""],["__WATCHOS_5_1",""],["__WATCHOS_5_2",""],["__WATCHOS_5_3",""],["__WATCHOS_6_0",""],["__WATCHOS_6_1",""],["__WATCHOS_6_2",""],["__WATCHOS_7_0",""],["__WATCHOS_7_1",""],["__WATCHOS_7_2",""],["__WORDSIZE",""],["__bool_true_false_are_defined",""],["false_",""],["idtype_t_P_ALL",""],["idtype_t_P_PGID",""],["idtype_t_P_PID",""],["true_",""]],"fn":[["_Exit",""],["__assert_rtn",""],["__snprintf_chk",""],["__sprintf_chk",""],["__sputc",""],["__srget",""],["__svfscanf",""],["__swbuf",""],["__vsnprintf_chk",""],["__vsprintf_chk",""],["_mm_clflush",""],["_mm_getcsr",""],["_mm_lfence",""],["_mm_mfence",""],["_mm_pause",""],["_mm_setcsr",""],["_mm_sfence",""],["a64l",""],["abort",""],["abs",""],["aligned_alloc",""],["array_array_container_andnot",""],["array_array_container_iandnot",""],["array_array_container_inplace_union",""],["array_array_container_ixor",""],["array_array_container_lazy_inplace_union",""],["array_array_container_lazy_union",""],["array_array_container_lazy_xor",""],["array_array_container_union",""],["array_array_container_xor",""],["array_bitset_container_andnot",""],["array_bitset_container_iandnot",""],["array_bitset_container_intersect",""],["array_bitset_container_intersection",""],["array_bitset_container_intersection_cardinality",""],["array_bitset_container_ixor",""],["array_bitset_container_lazy_union",""],["array_bitset_container_lazy_xor",""],["array_bitset_container_union",""],["array_bitset_container_xor",""],["array_container_add_from_range",""],["array_container_andnot",""],["array_container_clone",""],["array_container_contains",""],["array_container_copy",""],["array_container_create",""],["array_container_create_given_capacity",""],["array_container_create_range",""],["array_container_deserialize",""],["array_container_equal_bitset","Return true if the two containers have the same content."],["array_container_free",""],["array_container_from_bitset",""],["array_container_from_run",""],["array_container_grow","Increase capacity to at least min. Whether the existing data needs to be copied over depends on the “preserve” parameter. If preserve is false, then the new content will be uninitialized, otherwise the old content is copied."],["array_container_index_equalorlarger",""],["array_container_intersect",""],["array_container_intersection",""],["array_container_intersection_cardinality",""],["array_container_intersection_inplace",""],["array_container_is_subset","Return true if container1 is a subset of container2."],["array_container_is_subset_bitset","Return true if container1 is a subset of container2."],["array_container_is_subset_run","Return true if container1 is a subset of container2."],["array_container_iterate",""],["array_container_iterate64",""],["array_container_maximum",""],["array_container_minimum",""],["array_container_negation",""],["array_container_negation_range",""],["array_container_negation_range_inplace",""],["array_container_number_of_runs",""],["array_container_printf",""],["array_container_printf_as_uint32_array",""],["array_container_rank",""],["array_container_read","Reads the instance from buf, outputs how many bytes were read. This is meant to be byte-by-byte compatible with the Java and Go versions of Roaring. The number of bytes read should be array_container_size_in_bytes(container). You need to provide the (known) cardinality."],["array_container_serialization_len",""],["array_container_serialize",""],["array_container_shrink_to_fit",""],["array_container_to_uint32_array",""],["array_container_union",""],["array_container_write","Writes the underlying array to buf, outputs how many bytes were written. This is meant to be byte-by-byte compatible with the Java and Go versions of Roaring. The number of bytes written should be array_container_size_in_bytes(container)."],["array_container_xor",""],["array_run_container_andnot",""],["array_run_container_iandnot",""],["array_run_container_inplace_union",""],["array_run_container_intersect",""],["array_run_container_intersection",""],["array_run_container_intersection_cardinality",""],["array_run_container_ixor",""],["array_run_container_lazy_xor",""],["array_run_container_union",""],["array_run_container_xor",""],["atexit",""],["atof",""],["atoi",""],["atol",""],["atoll",""],["binarySearch",""],["bitset_array_container_andnot",""],["bitset_array_container_iandnot",""],["bitset_array_container_ixor",""],["bitset_bitset_container_andnot",""],["bitset_bitset_container_iandnot",""],["bitset_bitset_container_intersection",""],["bitset_bitset_container_intersection_inplace",""],["bitset_bitset_container_ixor",""],["bitset_bitset_container_xor",""],["bitset_clear_list",""],["bitset_container_add_from_range",""],["bitset_container_and",""],["bitset_container_and_justcard",""],["bitset_container_and_nocard",""],["bitset_container_andnot",""],["bitset_container_andnot_justcard",""],["bitset_container_andnot_nocard",""],["bitset_container_clear",""],["bitset_container_clone",""],["bitset_container_compute_cardinality",""],["bitset_container_contains",""],["bitset_container_copy",""],["bitset_container_create",""],["bitset_container_deserialize",""],["bitset_container_equals","Return true if the two containers have the same content."],["bitset_container_free",""],["bitset_container_from_array",""],["bitset_container_from_run",""],["bitset_container_from_run_range","Create new bitset container which is a union of run container and range [min, max]. Caller is responsible for freeing run container."],["bitset_container_get",""],["bitset_container_index_equalorlarger",""],["bitset_container_intersect",""],["bitset_container_intersection",""],["bitset_container_intersection_justcard",""],["bitset_container_is_subset","Return true if container1 is a subset of container2."],["bitset_container_is_subset_run","Return true if container1 is a subset of container2."],["bitset_container_iterate",""],["bitset_container_iterate64",""],["bitset_container_maximum",""],["bitset_container_minimum",""],["bitset_container_negation",""],["bitset_container_negation_inplace",""],["bitset_container_negation_range",""],["bitset_container_negation_range_inplace",""],["bitset_container_number_of_runs","Return the the number of runs."],["bitset_container_or",""],["bitset_container_or_justcard",""],["bitset_container_or_nocard",""],["bitset_container_printf",""],["bitset_container_printf_as_uint32_array",""],["bitset_container_rank",""],["bitset_container_read","Reads the instance from buf, outputs how many bytes were read. This is meant to be byte-by-byte compatible with the Java and Go versions of Roaring. The number of bytes read should be bitset_container_size_in_bytes(container). You need to provide the (known) cardinality."],["bitset_container_select","If the element of given rank is in this container, supposing that the first element has rank start_rank, then the function returns true and sets element accordingly. Otherwise, it returns false and update start_rank."],["bitset_container_serialization_len",""],["bitset_container_serialize",""],["bitset_container_set_all",""],["bitset_container_set_range",""],["bitset_container_to_uint32_array",""],["bitset_container_union",""],["bitset_container_union_justcard",""],["bitset_container_write","Writes the underlying array to buf, outputs how many bytes were written. This is meant to be byte-by-byte compatible with the Java and Go versions of Roaring. The number of bytes written should be bitset_container_size_in_bytes(container)."],["bitset_container_xor",""],["bitset_container_xor_justcard",""],["bitset_container_xor_nocard",""],["bitset_extract_intersection_setbits_uint16",""],["bitset_extract_setbits",""],["bitset_extract_setbits_avx2",""],["bitset_extract_setbits_sse_uint16",""],["bitset_extract_setbits_uint16",""],["bitset_flip_list",""],["bitset_flip_list_withcard",""],["bitset_run_container_andnot",""],["bitset_run_container_iandnot",""],["bitset_run_container_ixor",""],["bitset_set_list",""],["bitset_set_list_withcard",""],["bsearch",""],["calloc",""],["clearerr",""],["container_clone","Copies a container, requires a typecode. This allocates new memory, caller is responsible for deallocation. If the container is not shared, then it is physically cloned. Sharable containers are not cloneable."],["container_contains","Check whether a value is in a container, requires a  typecode"],["container_deserialize",""],["container_free","Recover memory from a container, requires a  typecode"],["container_mutable_unwrap_shared",""],["container_printf","print the container (useful for debugging), requires a  typecode"],["container_printf_as_uint32_array","print the content of the container as a comma-separated list of 32-bit values starting at base, requires a  typecode"],["container_serialization_len",""],["container_serialize",""],["container_unwrap_shared",""],["convert_run_optimize",""],["convert_run_to_efficient_container",""],["convert_run_to_efficient_container_and_free",""],["convert_to_bitset_or_array_container",""],["ctermid",""],["difference_uint16","Generic difference function (ANDNOT)."],["difference_vector16","A fast SSE-based difference function."],["div",""],["dprintf",""],["drand48",""],["ecvt",""],["erand48",""],["exit",""],["extend_array","If needed, increase the capacity of the array so that it can fit k values (at least);"],["fast_union_uint16","combines union_uint16 and  union_vector16 optimally"],["fclose",""],["fcvt",""],["fdopen",""],["feof",""],["ferror",""],["fflush",""],["fgetc",""],["fgetpos",""],["fgets",""],["fileno",""],["flockfile",""],["fmemopen",""],["fopen",""],["fprintf",""],["fputc",""],["fputs",""],["fread",""],["free",""],["freopen",""],["fscanf",""],["fseek",""],["fseeko",""],["fsetpos",""],["ftell",""],["ftello",""],["ftrylockfile",""],["funlockfile",""],["fwrite",""],["gcvt",""],["get_copy_of_container",""],["getc",""],["getc_unlocked",""],["getchar",""],["getchar_unlocked",""],["getdelim",""],["getenv",""],["getline",""],["getpriority",""],["getrlimit",""],["getrusage",""],["gets",""],["getsubopt",""],["grantpt",""],["initstate",""],["interleavedBinarySearch","Good old binary search through rle data"],["intersect_skewed_uint16",""],["intersect_skewed_uint16_cardinality",""],["intersect_skewed_uint16_nonempty",""],["intersect_uint16","Generic intersection function."],["intersect_uint16_cardinality","Compute the size of the intersection (generic)."],["intersect_uint16_nonempty","Checking whether the size of the intersection  is non-zero."],["intersect_vector16","From Schlegel et al., Fast Sorted-Set Intersection using SIMD Instructions Optimized by D. Lemire on May 3rd 2013"],["intersect_vector16_cardinality","Compute the cardinality of the intersection using SSE4 instructions"],["intersection_uint32","Generic intersection function."],["intersection_uint32_card","Generic intersection function, returns just the cardinality."],["jrand48",""],["l64a",""],["labs",""],["lcong48",""],["ldiv",""],["llabs",""],["lldiv",""],["lrand48",""],["malloc",""],["mblen",""],["mbstowcs",""],["mbtowc",""],["memccpy",""],["memchr",""],["memcmp",""],["memcpy",""],["memequals",""],["memmove",""],["memset",""],["mkstemp",""],["mktemp",""],["mrand48",""],["nrand48",""],["open_memstream",""],["pclose",""],["perror",""],["popen",""],["posix_memalign",""],["posix_openpt",""],["printf",""],["ptsname",""],["putc",""],["putc_unlocked",""],["putchar",""],["putchar_unlocked",""],["putenv",""],["puts",""],["qsort",""],["ra_advance_until_freeing",""],["ra_append","Append a new key-value pair"],["ra_append_copies_after","appends from sa to ra, starting with the smallest key that is is strictly greater than before_start"],["ra_append_copies_until","appends from sa to ra, ending with the greatest key that is is less or equal stopping_key"],["ra_append_copy","Append a new key-value pair to ra, cloning (in COW sense) a value from sa at index index"],["ra_append_copy_range","Append new key-value pairs to ra, cloning (in COW sense)  values from sa at indexes [start_index, end_index)"],["ra_append_move_range","Move the key-value pairs to ra from sa at indexes [start_index, end_index), old array should not be freed (use ra_clear_without_containers)"],["ra_append_range","Append new key-value pairs to ra,  from sa at indexes [start_index, end_index)"],["ra_clear","Frees the memory used by a roaring array"],["ra_clear_containers","Frees just the containers"],["ra_clear_without_containers","Frees the memory used by a roaring array, but does not free the containers"],["ra_copy","Copies this roaring array, we assume that dest is not initialized"],["ra_copy_range",""],["ra_create","Create a new roaring array"],["ra_downsize",""],["ra_get_container_at_index","Retrieves the container at index i, filling in the typecode"],["ra_get_index","Get the index corresponding to a 16-bit key"],["ra_get_key_at_index","Retrieves the key at index i"],["ra_get_size",""],["ra_has_run_container","return true if it contains at least one run container."],["ra_init","Initialize with zero capacity"],["ra_init_with_capacity","Initialize an existing roaring array with the specified capacity (in number of containers)"],["ra_insert_new_key_value_at","Add a new key-value pair at index i"],["ra_overwrite","Copies this roaring array, we assume that dest is initialized"],["ra_portable_deserialize","read a bitmap from a serialized version. This is meant to be compatible with the Java and Go versions. maxbytes  indicates how many bytes available from buf. When the function returns true, roaring_array_t is populated with the data and *readbytes indicates how many bytes were read. In all cases, if the function returns true, then maxbytes >= *readbytes."],["ra_portable_deserialize_size","Quickly checks whether there is a serialized bitmap at the pointer, not exceeding size “maxbytes” in bytes. This function does not allocate memory dynamically."],["ra_portable_header_size","Size of the header when serializing (meant to be compatible with Java and Go versions)"],["ra_portable_serialize","write a bitmap to a buffer. This is meant to be compatible with the Java and Go versions. Return the size in bytes of the serialized output (which should be ra_portable_size_in_bytes(ra))."],["ra_portable_size_in_bytes","How many bytes are required to serialize this bitmap (meant to be compatible with Java and Go versions)"],["ra_range_uint32_array",""],["ra_remove_at_index","remove at index i, sliding over all entries after i"],["ra_remove_at_index_and_free","remove at index i, sliding over all entries after i. Free removed container."],["ra_replace_key_and_container_at_index",""],["ra_reset","clears all containers, sets the size at 0 and shrinks the memory usage."],["ra_set_container_at_index","Set the container at the corresponding index using the specified typecode."],["ra_shift_tail","Shifts rightmost $count containers to the left (distance < 0) or to the right (distance > 0). Allocates memory if necessary. This function doesn’t free or create new containers. Caller is responsible for that."],["ra_shrink_to_fit",""],["ra_to_uint32_array",""],["rand",""],["rand_r",""],["random",""],["realloc",""],["realpath",""],["remove",""],["rename",""],["renameat",""],["rewind",""],["roaring_advance_uint32_iterator","Advance the iterator. If there is a new value, then it->has_value is true. The new value is in it->current_value. Values are traversed in increasing orders. For convenience, returns it->has_value."],["roaring_bitmap_add","Add value x"],["roaring_bitmap_add_checked","Add value x Returns true if a new value was added, false if the value was already existing."],["roaring_bitmap_add_many","Add value n_args from pointer vals, faster than repeatedly calling roaring_bitmap_add"],["roaring_bitmap_add_range","Add all values in range [min, max)"],["roaring_bitmap_add_range_closed","Add all values in range [min, max]"],["roaring_bitmap_and","Computes the intersection between two bitmaps and returns new bitmap. The caller is responsible for memory management."],["roaring_bitmap_and_cardinality","Computes the size of the intersection between two bitmaps."],["roaring_bitmap_and_inplace","Inplace version modifies x1, x1 == x2 is allowed"],["roaring_bitmap_andnot","Computes the  difference (andnot) between two bitmaps and returns new bitmap. The caller is responsible for memory management."],["roaring_bitmap_andnot_cardinality","Computes the size of the difference (andnot) between two bitmaps."],["roaring_bitmap_andnot_inplace","Inplace version of roaring_bitmap_andnot, modifies x1. x1 != x2."],["roaring_bitmap_clear","Empties the bitmap"],["roaring_bitmap_contains","Check if value x is present"],["roaring_bitmap_contains_range","Check whether a range of values from range_start (included) to range_end (excluded) is present"],["roaring_bitmap_copy","Copies a  bitmap. This does memory allocation. The caller is responsible for memory management."],["roaring_bitmap_create","Creates a new bitmap (initially empty)"],["roaring_bitmap_create_with_capacity","Creates a new bitmap (initially empty) with a provided container-storage capacity (it is a performance hint)."],["roaring_bitmap_deserialize","use with roaring_bitmap_serialize see roaring_bitmap_portable_deserialize if you want a format that’s compatible with Java and Go implementations"],["roaring_bitmap_equals","Return true if the two bitmaps contain the same elements."],["roaring_bitmap_flip","compute the negation of the roaring bitmap within a specified interval: [range_start, range_end). The number of negated values is range_end - range_start. Areas outside the range are passed through unchanged."],["roaring_bitmap_flip_inplace","compute (in place) the negation of the roaring bitmap within a specified interval: [range_start, range_end). The number of negated values is range_end - range_start. Areas outside the range are passed through unchanged."],["roaring_bitmap_free","Frees the memory."],["roaring_bitmap_from_range","Add all the values between min (included) and max (excluded) that are at a distance k*step from min."],["roaring_bitmap_frozen_serialize","Serializes bitmap using frozen format. Buffer size must be at least roaring_bitmap_frozen_size_in_bytes()."],["roaring_bitmap_frozen_size_in_bytes","Returns number of bytes required to serialize bitmap using frozen format."],["roaring_bitmap_frozen_view","Creates constant bitmap that is a view of a given buffer. Buffer must contain data previously written by roaring_bitmap_frozen_serialize(), and additionally its beginning must be aligned by 32 bytes. Length must be equal exactly to roaring_bitmap_frozen_size_in_bytes()."],["roaring_bitmap_get_cardinality","Get the cardinality of the bitmap (number of elements)."],["roaring_bitmap_get_copy_on_write",""],["roaring_bitmap_intersect","Check whether two bitmaps intersect."],["roaring_bitmap_is_empty","Returns true if the bitmap is empty (cardinality is zero)."],["roaring_bitmap_is_strict_subset","Return true if all the elements of ra1 are also in ra2 and ra2 is strictly greater than ra1."],["roaring_bitmap_is_subset","Return true if all the elements of ra1 are also in ra2."],["roaring_bitmap_jaccard_index","Computes the Jaccard index between two bitmaps. (Also known as the Tanimoto distance, or the Jaccard similarity coefficient)"],["roaring_bitmap_lazy_or","(For expert users who seek high performance.)"],["roaring_bitmap_lazy_or_inplace","(For expert users who seek high performance.) Inplace version of roaring_bitmap_lazy_or, modifies x1 The bitsetconversion conversion is a flag which determines whether container-container operations force a bitset conversion."],["roaring_bitmap_lazy_xor","Computes the symmetric difference between two bitmaps and returns new bitmap. The caller is responsible for memory management."],["roaring_bitmap_lazy_xor_inplace","(For expert users who seek high performance.) Inplace version of roaring_bitmap_lazy_xor, modifies x1. x1 != x2"],["roaring_bitmap_maximum","roaring_bitmap_smallest returns the greatest value in the set. Returns 0 if the set is empty."],["roaring_bitmap_minimum","roaring_bitmap_smallest returns the smallest value in the set. Returns UINT32_MAX if the set is empty."],["roaring_bitmap_of","Creates a new bitmap from a list of uint32_t integers"],["roaring_bitmap_of_ptr","Creates a new bitmap from a pointer of uint32_t integers"],["roaring_bitmap_or","Computes the union between two bitmaps and returns new bitmap. The caller is responsible for memory management."],["roaring_bitmap_or_cardinality","Computes the size of the union between two bitmaps."],["roaring_bitmap_or_inplace","Inplace version of roaring_bitmap_or, modifies x1. TDOO: decide whether x1 == x2 ok"],["roaring_bitmap_or_many","Compute the union of ‘number’ bitmaps. See also roaring_bitmap_or_many_heap. Caller is responsible for freeing the result."],["roaring_bitmap_or_many_heap","Compute the union of ‘number’ bitmaps using a heap. This can sometimes be faster than roaring_bitmap_or_many which uses a naive algorithm. Caller is responsible for freeing the result."],["roaring_bitmap_overwrite","Copies a  bitmap from src to dest. It is assumed that the pointer dest is to an already allocated bitmap. The content of the dest bitmap is freed/deleted."],["roaring_bitmap_portable_deserialize","read a bitmap from a serialized version. This is meant to be compatible with the Java and Go versions. See format specification at https://github.com/RoaringBitmap/RoaringFormatSpec In case of failure, a null pointer is returned. This function is unsafe in the sense that if there is no valid serialized bitmap at the pointer, then many bytes could be read, possibly causing a buffer overflow. For a safer approach, call roaring_bitmap_portable_deserialize_safe."],["roaring_bitmap_portable_deserialize_safe","read a bitmap from a serialized version in a safe manner (reading up to maxbytes). This is meant to be compatible with the Java and Go versions. See format specification at https://github.com/RoaringBitmap/RoaringFormatSpec In case of failure, a null pointer is returned."],["roaring_bitmap_portable_deserialize_size","Check how many bytes would be read (up to maxbytes) at this pointer if there is a bitmap, returns zero if there is no valid bitmap. This is meant to be compatible with the Java and Go versions. See format specification at https://github.com/RoaringBitmap/RoaringFormatSpec"],["roaring_bitmap_portable_serialize","write a bitmap to a char buffer.  The output buffer should refer to at least roaring_bitmap_portable_size_in_bytes(ra) bytes of allocated memory. This is meant to be compatible with the Java and Go versions. Returns how many bytes were written which should be roaring_bitmap_portable_size_in_bytes(ra).  See format specification at https://github.com/RoaringBitmap/RoaringFormatSpec"],["roaring_bitmap_portable_size_in_bytes","How many bytes are required to serialize this bitmap (meant to be compatible with Java and Go versions).  See format specification at https://github.com/RoaringBitmap/RoaringFormatSpec"],["roaring_bitmap_printf","Print the content of the bitmap."],["roaring_bitmap_printf_describe","Describe the inner structure of the bitmap."],["roaring_bitmap_range_cardinality","Returns number of elements in range [range_start, range_end)."],["roaring_bitmap_range_uint32_array","Convert the bitmap to an array from “offset” by “limit”. Write the output to “ans”. so, you can get data in paging. caller is responsible to ensure that there is enough memory allocated (e.g., ans = malloc(roaring_bitmap_get_cardinality(limit)"],["roaring_bitmap_rank","roaring_bitmap_rank returns the number of integers that are smaller or equal to x."],["roaring_bitmap_remove","Remove value x"],["roaring_bitmap_remove_checked","Remove value x Returns true if a new value was removed, false if the value was not existing."],["roaring_bitmap_remove_many","Remove multiple values"],["roaring_bitmap_remove_range","Remove all values in range [min, max)"],["roaring_bitmap_remove_range_closed","Remove all values in range [min, max]"],["roaring_bitmap_remove_run_compression","Remove run-length encoding even when it is more space efficient return whether a change was applied"],["roaring_bitmap_repair_after_lazy","(For expert users who seek high performance.)"],["roaring_bitmap_run_optimize","convert array and bitmap containers to run containers when it is more efficient; also convert from run containers when more space efficient.  Returns true if the result has at least one run container. Additional savings might be possible by calling shrinkToFit()."],["roaring_bitmap_select","If the size of the roaring bitmap is strictly greater than rank, then this function returns true and set element to the element of given rank. Otherwise, it returns false."],["roaring_bitmap_serialize","write the bitmap to an output pointer, this output buffer should refer to at least roaring_bitmap_size_in_bytes(ra) allocated bytes."],["roaring_bitmap_set_copy_on_write",""],["roaring_bitmap_shrink_to_fit","If needed, reallocate memory to shrink the memory usage. Returns the number of bytes saved."],["roaring_bitmap_size_in_bytes","How many bytes are required to serialize this bitmap (NOT compatible with Java and Go versions)"],["roaring_bitmap_statistics","(For advanced users.) Collect statistics about the bitmap, see roaring_types.h for a description of roaring_statistics_t"],["roaring_bitmap_to_uint32_array","Convert the bitmap to an array. Write the output to “ans”, caller is responsible to ensure that there is enough memory allocated (e.g., ans = malloc(roaring_bitmap_get_cardinality(mybitmap)"],["roaring_bitmap_xor","Computes the symmetric difference (xor) between two bitmaps and returns new bitmap. The caller is responsible for memory management."],["roaring_bitmap_xor_cardinality","Computes the size of the symmetric difference (andnot) between two bitmaps."],["roaring_bitmap_xor_inplace","Inplace version of roaring_bitmap_xor, modifies x1. x1 != x2."],["roaring_bitmap_xor_many","Compute the xor of ‘number’ bitmaps. Caller is responsible for freeing the result."],["roaring_copy_uint32_iterator","Creates a copy of an iterator. Caller must free it."],["roaring_create_iterator","Create an iterator object that can be used to iterate through the values. Caller is responsible for calling roaring_free_iterator. The iterator is initialized. If there is a  value, then this iterator points to the first value and it->has_value is true. The value is in it->current_value."],["roaring_free_uint32_iterator","Free memory following roaring_create_iterator"],["roaring_init_iterator","Initialize an iterator object that can be used to iterate through the values. If there is a  value, then this iterator points to the first value and it->has_value is true. The value is in it->current_value."],["roaring_init_iterator_last","Initialize an iterator object that can be used to iterate through the values. If there is a value, then this iterator points to the last value and it->has_value is true. The value is in it->current_value."],["roaring_iterate","Iterate over the bitmap elements. The function iterator is called once for all the values with ptr (can be NULL) as the second parameter of each call."],["roaring_iterate64",""],["roaring_move_uint32_iterator_equalorlarger","Move the iterator to the first value >= val. If there is a such a value, then it->has_value is true. The new value is in it->current_value. For convenience, returns it->has_value."],["roaring_previous_uint32_iterator","Decrement the iterator. If there is a new value, then it->has_value is true. The new value is in it->current_value. Values are traversed in decreasing orders. For convenience, returns it->has_value."],["roaring_read_uint32_iterator",""],["run_array_container_andnot",""],["run_array_container_iandnot",""],["run_array_container_ixor",""],["run_bitset_container_andnot",""],["run_bitset_container_iandnot",""],["run_bitset_container_intersect",""],["run_bitset_container_intersection",""],["run_bitset_container_intersection_cardinality",""],["run_bitset_container_ixor",""],["run_bitset_container_lazy_union",""],["run_bitset_container_lazy_xor",""],["run_bitset_container_union",""],["run_bitset_container_xor",""],["run_container_add",""],["run_container_andnot",""],["run_container_clone",""],["run_container_contains",""],["run_container_copy",""],["run_container_create",""],["run_container_create_given_capacity",""],["run_container_deserialize",""],["run_container_equals_array","Return true if the two containers have the same content."],["run_container_equals_bitset","Return true if the two containers have the same content."],["run_container_free",""],["run_container_from_array",""],["run_container_grow","increase capacity to at least min. Whether the existing data needs to be copied over depends on copy. If “copy” is false, then the new content will be uninitialized, otherwise a copy is made."],["run_container_index_equalorlarger",""],["run_container_intersect",""],["run_container_intersection",""],["run_container_intersection_cardinality",""],["run_container_is_subset","Return true if container1 is a subset of container2."],["run_container_is_subset_array","Return true if container1 is a subset of container2."],["run_container_is_subset_bitset","Return true if container1 is a subset of container2."],["run_container_iterate",""],["run_container_iterate64",""],["run_container_maximum",""],["run_container_minimum",""],["run_container_negation",""],["run_container_negation_inplace",""],["run_container_negation_range",""],["run_container_negation_range_inplace",""],["run_container_printf",""],["run_container_printf_as_uint32_array",""],["run_container_rank",""],["run_container_read","Reads the instance from buf, outputs how many bytes were read. This is meant to be byte-by-byte compatible with the Java and Go versions of Roaring. The number of bytes read should be bitset_container_size_in_bytes(container). The cardinality parameter is provided for consistency with other containers, but it might be effectively ignored.."],["run_container_select","If the element of given rank is in this container, supposing that the first element has rank start_rank, then the function returns true and sets element accordingly. Otherwise, it returns false and update start_rank."],["run_container_serialization_len",""],["run_container_serialize",""],["run_container_shrink_to_fit",""],["run_container_smart_append_exclusive","Used in a start-finish scan that appends segments, for XOR and NOT"],["run_container_to_uint32_array",""],["run_container_union",""],["run_container_union_inplace",""],["run_container_write","Writes the underlying array to buf, outputs how many bytes were written. This is meant to be byte-by-byte compatible with the Java and Go versions of Roaring. The number of bytes written should be run_container_size_in_bytes(container)."],["run_container_xor",""],["run_run_container_andnot",""],["run_run_container_iandnot",""],["run_run_container_ixor",""],["run_run_container_xor",""],["scanf",""],["seed48",""],["setbuf",""],["setenv",""],["setkey",""],["setpriority",""],["setrlimit",""],["setstate",""],["setvbuf",""],["shared_container_extract_copy",""],["shared_container_free",""],["signal",""],["snprintf",""],["sprintf",""],["srand",""],["srand48",""],["srandom",""],["sscanf",""],["stpcpy",""],["stpncpy",""],["strcat",""],["strchr",""],["strcmp",""],["strcoll",""],["strcpy",""],["strcspn",""],["strdup",""],["strerror",""],["strerror_r",""],["strlen",""],["strncat",""],["strncmp",""],["strncpy",""],["strndup",""],["strnlen",""],["strpbrk",""],["strrchr",""],["strsignal",""],["strspn",""],["strstr",""],["strtod",""],["strtof",""],["strtok",""],["strtok_r",""],["strtol",""],["strtold",""],["strtoll",""],["strtoul",""],["strtoull",""],["strxfrm",""],["system",""],["tempnam",""],["tmpfile",""],["tmpnam",""],["ungetc",""],["union_uint16","Generic union function."],["union_uint32","Generic union function."],["union_uint32_card","Generic union function, returns just the cardinality."],["union_vector16","A fast SSE-based union function."],["unlockpt",""],["unsetenv",""],["vdprintf",""],["vfprintf",""],["vfscanf",""],["vprintf",""],["vscanf",""],["vsnprintf",""],["vsprintf",""],["vsscanf",""],["wait",""],["waitid",""],["waitpid",""],["wcstombs",""],["wctomb",""],["xor_uint16","Generic XOR function."],["xor_vector16","A fast SSE-based XOR function."]],"static":[["__mb_cur_max",""],["__stderrp",""],["__stdinp",""],["__stdoutp",""],["container_names",""],["shared_container_names",""]],"struct":[["__BindgenBitfieldUnit",""],["__darwin_fp_control",""],["__darwin_fp_status",""],["__darwin_i386_avx512_state",""],["__darwin_i386_avx_state",""],["__darwin_i386_exception_state",""],["__darwin_i386_float_state",""],["__darwin_i386_thread_state",""],["__darwin_mcontext32",""],["__darwin_mcontext64",""],["__darwin_mcontext64_full",""],["__darwin_mcontext_avx32",""],["__darwin_mcontext_avx512_32",""],["__darwin_mcontext_avx512_64",""],["__darwin_mcontext_avx512_64_full",""],["__darwin_mcontext_avx64",""],["__darwin_mcontext_avx64_full",""],["__darwin_mmst_reg",""],["__darwin_opmask_reg",""],["__darwin_pthread_handler_rec",""],["__darwin_sigaltstack",""],["__darwin_ucontext",""],["__darwin_x86_avx512_state64",""],["__darwin_x86_avx_state64",""],["__darwin_x86_cpmu_state64",""],["__darwin_x86_debug_state32",""],["__darwin_x86_debug_state64",""],["__darwin_x86_exception_state64",""],["__darwin_x86_float_state64",""],["__darwin_x86_thread_full_state64",""],["__darwin_x86_thread_state64",""],["__darwin_xmm_reg",""],["__darwin_ymm_reg",""],["__darwin_zmm_reg",""],["__last_branch_record",""],["__last_branch_state",""],["__sFILE",""],["__sFILEX",""],["__sbuf",""],["__sigaction",""],["__siginfo",""],["__va_list_tag",""],["__x86_instruction_state",""],["__x86_pagein_state",""],["_opaque_pthread_attr_t",""],["_opaque_pthread_cond_t",""],["_opaque_pthread_condattr_t",""],["_opaque_pthread_mutex_t",""],["_opaque_pthread_mutexattr_t",""],["_opaque_pthread_once_t",""],["_opaque_pthread_rwlock_t",""],["_opaque_pthread_rwlockattr_t",""],["_opaque_pthread_t",""],["array_container_s",""],["bitset_container_s",""],["div_t",""],["ldiv_t",""],["lldiv_t",""],["rle16_s",""],["rlimit",""],["roaring_array_s","Roaring arrays are array-based key-value pairs having containers as values and 16-bit integer keys. A roaring bitmap  might be implemented as such."],["roaring_bitmap_s",""],["roaring_statistics_s","(For advanced users.) The roaring_statistics_t can be used to collect detailed statistics about the composition of a roaring bitmap."],["roaring_uint32_iterator_s","What follows is code use to iterate through values in a roaring bitmap"],["run_container_s",""],["rusage",""],["shared_container_s","A shared container is a wrapper around a container with reference counting."],["sigaction",""],["sigevent",""],["sigstack",""],["timeval",""]],"type":[["FILE",""],["_MM_CMPINT_ENUM",""],["_MM_MANTISSA_NORM_ENUM",""],["_MM_MANTISSA_SIGN_ENUM",""],["_MM_PERM_ENUM",""],["__bfloat16",""],["__builtin_va_list",""],["__darwin_blkcnt_t",""],["__darwin_blksize_t",""],["__darwin_clock_t",""],["__darwin_ct_rune_t",""],["__darwin_dev_t",""],["__darwin_fp_control_t",""],["__darwin_fp_status_t",""],["__darwin_fsblkcnt_t",""],["__darwin_fsfilcnt_t",""],["__darwin_gid_t",""],["__darwin_id_t",""],["__darwin_ino64_t",""],["__darwin_ino_t",""],["__darwin_intptr_t",""],["__darwin_mach_port_name_t",""],["__darwin_mach_port_t",""],["__darwin_mbstate_t",""],["__darwin_mode_t",""],["__darwin_natural_t",""],["__darwin_nl_item",""],["__darwin_off_t",""],["__darwin_pid_t",""],["__darwin_pthread_attr_t",""],["__darwin_pthread_cond_t",""],["__darwin_pthread_condattr_t",""],["__darwin_pthread_key_t",""],["__darwin_pthread_mutex_t",""],["__darwin_pthread_mutexattr_t",""],["__darwin_pthread_once_t",""],["__darwin_pthread_rwlock_t",""],["__darwin_pthread_rwlockattr_t",""],["__darwin_pthread_t",""],["__darwin_ptrdiff_t",""],["__darwin_rune_t",""],["__darwin_sigset_t",""],["__darwin_size_t",""],["__darwin_socklen_t",""],["__darwin_ssize_t",""],["__darwin_suseconds_t",""],["__darwin_time_t",""],["__darwin_uid_t",""],["__darwin_useconds_t",""],["__darwin_uuid_string_t",""],["__darwin_uuid_t",""],["__darwin_va_list",""],["__darwin_wchar_t",""],["__darwin_wctrans_t",""],["__darwin_wctype_t",""],["__darwin_wint_t",""],["__int16_t",""],["__int32_t",""],["__int64_t",""],["__int8_t",""],["__m128",""],["__m128_u",""],["__m128bh",""],["__m128d",""],["__m128d_u",""],["__m128i",""],["__m128i_u",""],["__m256",""],["__m256_u",""],["__m256bh",""],["__m256d",""],["__m256d_u",""],["__m256i",""],["__m256i_u",""],["__m512",""],["__m512_u",""],["__m512bh",""],["__m512d",""],["__m512d_u",""],["__m512i",""],["__m512i_u",""],["__m64",""],["__mmask16",""],["__mmask32",""],["__mmask64",""],["__mmask8",""],["__uint16_t",""],["__uint32_t",""],["__uint64_t",""],["__uint8_t",""],["__v16hi",""],["__v16hu",""],["__v16qi",""],["__v16qs",""],["__v16qu",""],["__v16sf",""],["__v16si",""],["__v16su",""],["__v1di",""],["__v2df",""],["__v2di",""],["__v2du",""],["__v2hi",""],["__v2qi",""],["__v2sf",""],["__v2si",""],["__v32hi",""],["__v32hu",""],["__v32qi",""],["__v32qs",""],["__v32qu",""],["__v4df",""],["__v4di",""],["__v4du",""],["__v4hi",""],["__v4qi",""],["__v4sf",""],["__v4si",""],["__v4su",""],["__v64qi",""],["__v64qu",""],["__v8df",""],["__v8di",""],["__v8du",""],["__v8hi",""],["__v8hu",""],["__v8qi",""],["__v8sf",""],["__v8si",""],["__v8su",""],["_bindgen_ty_1",""],["_bindgen_ty_2","During lazy computations, we can transform array containers into bitset containers as long as we can expect them to have  ARRAY_LAZY_LOWERBOUND values."],["_bindgen_ty_3",""],["_bindgen_ty_4",""],["_bindgen_ty_5",""],["_bindgen_ty_6",""],["_bindgen_ty_7",""],["array_container_t",""],["bitset_container_t",""],["fpos_t",""],["id_t",""],["idtype_t",""],["int_fast16_t",""],["int_fast32_t",""],["int_fast64_t",""],["int_fast8_t",""],["int_least16_t",""],["int_least32_t",""],["int_least64_t",""],["int_least8_t",""],["intmax_t",""],["mcontext_t",""],["off_t",""],["pid_t",""],["pthread_attr_t",""],["register_t",""],["rle16_t",""],["rlim_t",""],["roaring_array_t","Roaring arrays are array-based key-value pairs having containers as values and 16-bit integer keys. A roaring bitmap  might be implemented as such."],["roaring_bitmap_t",""],["roaring_iterator",""],["roaring_iterator64",""],["roaring_statistics_t","(For advanced users.) The roaring_statistics_t can be used to collect detailed statistics about the composition of a roaring bitmap."],["roaring_uint32_iterator_t","What follows is code use to iterate through values in a roaring bitmap"],["run_container_t",""],["shared_container_t",""],["sig_atomic_t",""],["siginfo_t",""],["sigset_t",""],["stack_t",""],["syscall_arg_t",""],["u_int16_t",""],["u_int32_t",""],["u_int64_t",""],["u_int8_t",""],["ucontext_t",""],["uid_t",""],["uint_fast16_t",""],["uint_fast32_t",""],["uint_fast64_t",""],["uint_fast8_t",""],["uint_least16_t",""],["uint_least32_t",""],["uint_least64_t",""],["uint_least8_t",""],["uintmax_t",""],["va_list",""],["wchar_t",""]],"union":[["__mbstate_t",""],["__sigaction_u",""],["sigval",""]]});